<?php

namespace App\Libraries\DynamicFormManager\Widgets;


class ChoiceWidget extends Widget
{
    protected $allowMultipleSelected = false;
    protected $inputType = null;
    protected $templateName = null;
    protected $optionTemplateName = null;
    protected $addIdIndex = true;
    protected $checkedAttribute = ['checked' => true];
    public $optionInheritAttribute = true;
    public $choices;
    public $wrap_label = true;
    public $default_value = null;

    public function __construct(
        array $attributes = ['class' => 'form-control form-medium'],
        array $choices = [],
        $options = []
    ){
        $defaultOption = [
            'optionInheritAttribute' => false
        ];
        $options = array_merge($defaultOption, $options);
        $this->optionInheritAttribute = $options['optionInheritAttribute'];
        parent::__construct($attributes);
        $this->choices = $choices;
    }

    public function subwidgets($name, $value, $attrs = [])
    {
        $value = $this->formatValue($value);
    }

    public function options($name, $value, $attrs = [])
    {
        $options = [];
        foreach ($this->optgroups($name, $value, $attrs) as $group) {
            foreach ($group[1] as $option) {
                $options[] = $option;
            }
        }
        return $options;
    }

    public function optgroups($name, $value = [], $attrs = [])
    {
        if ($this->allowMultipleSelected) {
            $name .= '[]';
        }
        if (!$value && isset($this->default_value)) {
            $value = $this->default_value;
        }
        $group = [[null, [], 0]];
        $default = &$group[0];
        foreach ($this->choices as $optionValue => $optionLabel) {
            if (is_array($optionLabel)) {
                $index = end($group)[2] + 1;
                $subIndex = 0;
                $subGroup = [];
                $choices = $optionLabel;
                foreach ($choices as $subValue => $subLabel) {
                    if ((is_array($value) && in_array($subValue,
                            $value) || $value == $subValue)
                    ) {
                        $selected = true;
                    }else {
                        $selected = false;
                    }
                    $subGroup[] = $this->createOption($name, $subValue, $subLabel, $selected, $index, $subIndex,
                        $attrs);
                    $subIndex += 1;
                }
                $newValue = array($optionValue, $subGroup, 0);
                $group[] = $newValue;
            }else {
                $index = count($default[1]);
                $subGroupDefault = &$default[1];
                $subIndex = null;
                $choices = [$optionValue => $optionLabel];
                foreach ($choices as $subValue => $subLabel) {
                    if ((is_array($value) && in_array($subValue,
                                $value)) || ($value == $subValue)
                    ) {
                        $selected = true;
                    }else {
                        $selected = false;
                    }
                    $subGroupDefault[] = $this->createOption($name, $subValue, $subLabel, $selected, $index, $subIndex,
                        $attrs);
                }
            }
        }
        return $group;
    }


    public function createOption($name, $value, $label, $selected, $index, $subIndex, $attrs = [])
    {
        if (is_null($subIndex)) {
            $index = (string)$index;
        }else {
            $index = $index . '_' . $subIndex;
        }

        if ($this->optionInheritAttribute) {
            $optionAttributes = $this->buildAttrs($this->attrs, $attrs);
        }else {
            $optionAttributes = [];
        }
        if ($selected) {
            $optionAttributes = array_merge($optionAttributes, $this->checkedAttribute);
        }
        return [
            'name' => $name,
            'value' => $value,
            'label' => $label,
            'selected' => $selected,
            'index' => $index,
            'attrs' => $optionAttributes,
            'type' => $this->inputType,
            'templateName' => $this->optionTemplateName
        ];
    }

    public function getContext($name, $value, $attrs = [])
    {
        $context = parent::getContext($name, $value, $attrs); // TODO: Change the autogenerated stub
        $context['widget']['optgroups'] = $this->optgroups($name, $context['widget']['value'], $attrs);
        $context['wrap_label'] = true;
        $context['widget']['choices'] = $this->choices;
        return $context;
    }

    public function displayData($data, $name)
    {
        $value = parent::displayData($data, $name); // TODO: Change the autogenerated stub
        if (isset($value) && isset($this->choices[$value])) {
            return $this->choices[$value];
        }else {
            return '';
        }
    }


}